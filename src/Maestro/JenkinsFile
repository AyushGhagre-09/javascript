/************************************************************************
* To configure this using all defaults, simply change the project name.
*************************************************************************/
//Select nodes by labels or computer names (i.e. Windows, Linux, PI etc)

def buildProj = new org.win.BuildSteps()
def octo = new org.deployment.octo();
def postBuild = new org.win.PostBuildSteps()
def helpers = new org.settings.HelperFunctions()
def gitVersion = new org.tools.GitVersion()
def versionInfo
def isPR = false
def isDevelop = false
def configEnvironment = 'dev'
def isDevOrPullRequest = true
def isDevelopOrPullRequest = true
def nodeLabel = 'febuildbox'
def timeoutDuration = 60
def workspace
def releaseVersion
currentBuild.result = 'SUCCESS'
// def prNumber = ''
def PreviousBuildResult
def ActualPreviousBuildResult
def PreviousBuildFailed = true

node('febuildbox') {
    isPR = env.BRANCH_NAME.toLowerCase().startsWith('pr')
    isDevelop = env.BRANCH_NAME.toLowerCase() == 'develop'
    configEnvironment = helpers.getConfigEnvironment()
    isDevOrPullRequest = isPR || configEnvironment == 'dev'
    isDevelopOrPullRequest = isDevOrPullRequest || isDevelop
    nodeLabel = isDevOrPullRequest ? 'fe_pr' : 'febuildbox'
    timeoutDuration = 60
    // if (isPR) {
    //     prNumber = env.BRANCH_NAME.toLowerCase().split('pr-')[1]
    // }
    //set up properties for job.
    //defaults are 14 days or 100 builds, 0 days for artifacts, 0 builds
    workspace =  helpers.getWorkspaceDirectory()
    releaseVersion = ''
    PreviousBuildResult = currentBuild.getPreviousBuild()
    echo 'Previous build : ' + PreviousBuildResult

    if (PreviousBuildResult == null) {
        echo 'No previous build occurred for this PR'
    }
        else
    {
        ActualPreviousBuildResult = PreviousBuildResult.getResult()
        echo 'Previous Build Result : ' + ActualPreviousBuildResult

        PreviousBuildFailed = ActualPreviousBuildResult == 'FAILURE'
        echo 'PreviousBuildFailed = ' + PreviousBuildFailed
    }
}

node('Jenkinscontroller')
{
    dir(workspace) {
        if (!isDevOrPullRequest) {
            stage ('Checkout on main node for Legacy support') {
                checkout scm
            }
        }
    }
}

node(nodeLabel)
{
    dir(workspace)
    {
        timeout(timeoutDuration) // time in minutes
        {
            //generates timestamps
            wrap([$class: 'TimestamperBuildWrapper'])
            {
                try {
                    stage ('Configuring Job')
                    {
                        if (!isDevOrPullRequest) {
                            helpers.setLogPropertiesByParams(14, 90, 1, 10, 'maestro', 1, 1)
                        }
                        else {
                            // less logs, throttle only per PR, but destroy the box
                            properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '10')), disableConcurrentBuilds(abortPrevious: true), [$class: 'ThrottleJobProperty', categories: ['pr'], limitOneJobWithMatchingParams: false, maxConcurrentPerNode: 1, maxConcurrentTotal: 3, paramsToUseForLimit: '', throttleEnabled: true, throttleOption: 'category']])
                        }
                    }

                     stage('Cleaning directory')
                     {
                         if (!isPR) {
                             
                             cleanWs(deleteDirs: true, patterns: [
                               [pattern: 'src', type: 'EXCLUDE'],
                               [pattern: 'src/Maestro', type: 'EXCLUDE'],
                               [pattern: 'src/Maestro/node_modules/**', type: 'EXCLUDE']
                             ])
                         }
                     }

                    stage ('Checkout') {
                        checkout scm
                    }

                    stage('Assembly Extraction / packaging')
                    {
                        parallel(
                            'Assembly Extraction': {
                                if (!isDevOrPullRequest) {
                                    versionInfo = gitVersion.parseGitVersion()
                                    currentBuild.description = versionInfo.AssemblySemVer
                                    //currentBuild.description = versionInfo.MajorMinorPatch + "." + env.BUILD_NUMBER
                                    releaseVersion = versionInfo.NuGetVersion + '.' + env.BUILD_NUMBER
                                }
                                else {
                                    echo 'Versioning not supported for pr builds at this time'
                                }
                            },
                            'Yarn': {
                                def changeResponseClient = powershell(returnStdout: true, script: 'git diff HEAD~1..HEAD ./src/Maestro')

                                if (!isDevelopOrPullRequest) {
                                    buildProj.yarnInstall(workspace + "\\src\\Maestro")
                                }
                                else {
                                    if (changeResponseClient || PreviousBuildFailed) {
                                        if (isDevelop) {
                                            buildProj.yarnInstall(workspace + "\\src\\Maestro")
                                        }
                                        else {
                                            if (changeResponseClient || PreviousBuildFailed) {
                                                buildProj.yarnInstall(workspace + "\\src\\Maestro")
                                            }
                                        }
                                    }
                                }
                            }
                        )
                    }
                    stage('Build and Packaging') {
                        parallel(
                            'Client Build': {
                                stage('Maestro') {
                                    def changeResponseClient = powershell(returnStdout: true, script: 'git diff HEAD~1..HEAD ./src/Maestro')
                                    dir(workspace + "\\src\\Maestro") {
                                        if (!isDevelopOrPullRequest) {
                                            bat script: 'yarn run webpack:prod --release=' + releaseVersion
                                            stage('Generate GQL Queries'){
                                                bat script: 'yarn run generate-queries-jenkins'
                                            }
                                            octo.packFolder('Symphony.Client' + configEnvironment,  workspace + "\\public", releaseVersion)
                                            buildProj.PublishReleasePackage('Symphony.Client' + configEnvironment + "." + releaseVersion)
                                        }
                                        else {
                                            if (changeResponseClient || PreviousBuildFailed) {
                                                if (isDevelop) {
                                                    bat script: 'yarn run webpack:prod --release=' + releaseVersion
                                                    stage('Generate GQL Queries'){
                                                        bat script: 'yarn run generate-queries-jenkins'
                                                    }
                                                    octo.packFolder('Symphony.Client'+ configEnvironment,  workspace + "\\public", releaseVersion)
                                                    buildProj.PublishReleasePackage('Symphony.Client'+ configEnvironment + "." + releaseVersion)
                                                }
                                                else {
                                                    if (changeResponseClient || PreviousBuildFailed) {
                                                        bat script: 'yarn run webpack:dev'
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        )
                    }
                    stage('Configure sentry and upload source maps') {
                        def changeResponseClient = powershell(returnStdout: true, script: 'git diff HEAD~1..HEAD ./src/Maestro')

                        dir(workspace + "\\src\\Maestro") {
                            if (!isDevelopOrPullRequest) {
                                bat returnStatus: true, script: 'yarn sentry-cli releases new ' + releaseVersion
                                bat returnStatus: true, script: 'yarn sentry-cli releases set-commits ' + releaseVersion + ' --auto'
                                // Sourcemap generation for prod builds are currently not working due to out of memory issues
                                bat returnStatus: true, script: 'yarn sentry-cli releases files ' + releaseVersion + ' upload-sourcemaps ' + workspace + '\\src\\Symphony\\Api\\wwwroot\\dist\\'
                            }
                            else {
                                if (changeResponseClient || PreviousBuildFailed) {
                                    if (isDevelop) {
                                        bat returnStatus: true, script: 'yarn sentry-cli releases new ' + releaseVersion
                                        bat returnStatus: true, script: 'yarn sentry-cli releases set-commits ' + releaseVersion + ' --auto'
                                        // Sourcemap generation for prod builds are currently not working due to out of memory issues
                                        bat returnStatus: true, script: 'yarn sentry-cli releases files ' + releaseVersion + ' upload-sourcemaps ' + workspace + '\\src\\Symphony\\Api\\wwwroot\\dist\\'
                                    }
                                }
                            }
                        }
                    }

                    //stage('Cleaning directory')
                    //{
                    //    if (!isPR) {
                    //        cleanWs(deleteDirs: true, patterns: [
                    //            [pattern: '**/.git/**', type: 'EXCLUDE'],
                    //            [pattern: 'src', type: 'EXCLUDE'],
                    //            [pattern: 'src/Maestro', type: 'EXCLUDE'],
                    //            [pattern: 'src/Maestro/node_modules/**', type: 'EXCLUDE']
                    //        ])
                    //    }
                    //}
                }
                catch (ex) {
                    currentBuild.result = 'FAILURE'
                    echo 'Encountered an exception'
                    echo ex.toString()
                }
                finally {
                    stage('Processing unit tests') {
                        def changeResponseClient = powershell(returnStdout: true, script: 'git diff HEAD~1..HEAD ./src/Maestro')

                        if ( !isDevelopOrPullRequest || PreviousBuildFailed || changeResponseClient ) {
                            dir(workspace + "\\src\\Maestro") {
                                junit keepLongStdio: true, testResults: 'junit.xml', allowEmptyResults: true
                            }
                        }
                    }
                    stage ('Performing Post build operations') {
                        def changeResponseClient = powershell(returnStdout: true, script: 'git diff HEAD~1..HEAD ./src/Maestro')
                        echo "${currentBuild.result}"
                        if (currentBuild.result == 'FAILURE') {
                            postBuild.runBasicPostBuildSteps(true, false, false, true)
                            dir(workspace + "\\src\\Maestro") {
                                if (!isDevelopOrPullRequest) {
                                    bat returnStatus: true, script: 'yarn sentry-cli releases delete ' + releaseVersion
                                }
                                else {
                                    if (changeResponseClient || PreviousBuildFailed) {
                                        if (isDevelop) {
                                            bat returnStatus: true, script: 'yarn sentry-cli releases delete ' + releaseVersion
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            postBuild.runBasicPostBuildSteps()
                            dir(workspace + "\\src\\Maestro") {
                                if (!isDevelopOrPullRequest) {
                                    bat returnStatus: true, script: 'yarn sentry-cli releases finalize ' + releaseVersion
                                }
                                else {
                                    if (changeResponseClient || PreviousBuildFailed) {
                                        if (isDevelop) {
                                            bat returnStatus: true, script: 'yarn sentry-cli releases finalize ' + releaseVersion
                                        }
                                    }
                                }
                            }
                        }
                       /* if(isPR && currentBuild.result == "SUCCESS"){
                            stage('Auto Assign Reviewer'){
                            print 'PR Number : ' + prNumber
                            withCredentials([string(credentialsId: 'devops_basic_token', variable: 'devops_basic_token')]){
                                powershell '''./PRAutoReviewers.ps1 $devops_basic_token $prNumber'''
                            }
                            }
                        }*/
                        if (!isDevOrPullRequest) {
                            //Send Email to Front End Team
                            postBuild.sendEmailToFrontEndTeam()
                        }
                    }
                }
            }
        }
    }
}
